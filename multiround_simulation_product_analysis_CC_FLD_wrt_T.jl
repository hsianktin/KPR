@info "This script assumes simulation results are already available in DATA/"
@info """
The purpose of this script is to obtain 
the channel capacity of the product/substrate channels.
- CC‚Çö is the channel capacity of the product number distribution n‚Çú | input Œæ channel
- CC‚Çö·µÄ is the channel capacity of the FPT of product reaching n‚Çú‚Çï < T | input Œæ channel
"""
using BSON
using StatsBase

using ProgressMeter
profile = "PROFILES/large_kp.jl"
tasks = [(substrate, id) for substrate in ["k", "q"] for id in 1:99]
label = split(profile, "/")[end] |> x -> split(x, ".jl")[1]

# collect results
results_k = []
results_q = []
for task in tasks
    substrate, id = task
    result = BSON.load(
        "DATA/multiround_simulation_results_$(substrate)_$(id)_$(label).bson"
        )[:results]
    if substrate == "k"
        push!(results_k, result)
    elseif substrate == "q"
        push!(results_q, result)
    end
end
results_k = vcat(results_k...)
results_q = vcat(results_q...)

include("multiround_simulation_utils.jl");
include(profile);

# collection of states
Œ¶s_k = [result[1] for result in results_k]
# collection of times
Ts_k = [result[2] for result in results_k]
# collection of first activation times
œÑ‚Çês_k = [result[3] for result in results_k]
Ps_k = [[œï[i][1] for œï in Œ¶s_k] for i in 1:length(times)]

# collection of states, times and first activation times for incorrect substrate
Œ¶s_q = [result[1] for result in results_q]
Ts_q = [result[2] for result in results_q]
œÑ‚Çês_q = [result[3] for result in results_q]
Ps_q = [[œï[i][1] for œï in Œ¶s_q] for i in 1:length(times)]

Ns_k = [[œï[1] for œï in Œ¶] for Œ¶ in Œ¶s_k] # N_repeat samples, each sample is a time trajectory
Nt_k = [[Ns_k[i][t] for i in eachindex(Ns_k)] for t in eachindex(Ts_k[1])]
ùîºn‚Çú‚ùòk = [mean(Nt) for Nt in Nt_k]
ùïçn‚Çú‚ùòk = [var(Nt) for Nt in Nt_k]

Ns_q = [[œï[1] for œï in Œ¶] for Œ¶ in Œ¶s_q] # N_repeat samples, each sample is a time trajectory
Nt_q = [[Ns_q[i][t] for i in eachindex(Ns_q)] for t in eachindex(Ts_q[1])]
ùîºn‚Çú‚ùòq = [mean(Nt) for Nt in Nt_q]
ùïçn‚Çú‚ùòq = [var(Nt) for Nt in Nt_q]

time = Ts_k[1]

# Œ∑_FLD = |ùîºn‚Çú‚à£q - ùîºn‚Çú‚à£k|/(‚àöùïçn‚Çú‚à£q + ‚àöùïçn‚Çú‚à£k)
Œ∑_FLD = [abs(ùîºn‚Çú‚ùòq[i] - ùîºn‚Çú‚ùòk[i]) / (sqrt(ùïçn‚Çú‚ùòq[i]) + sqrt(ùïçn‚Çú‚ùòk[i]))     for i in eachindex(time)]
# replace NaN with 0
Œ∑_FLD = [ifelse(isnan(x), 0, x) for x in Œ∑_FLD]


ùêì‚Çös_k =  [result[4] for result in results_k]
ùêì‚Çös_q =  [result[4] for result in results_q]
ùêì‚Çös = [ùêì‚Çös_k, ùêì‚Çös_q]

##################################################################
############## Additional Ploting for Illustration ###############
##################################################################
using CSV, DataFrames
using PGFPlotsX
tikzpicture = @pgf TikzPicture({baseline})
axis = @pgf Axis({
    width="3in",
    height="3in",
    xlabel="contact time \$T\$",
    ylabel="number of products \${\\rm P}_T\$",
    xmode="log",
    ymode="log",
    xmin=1,
    ymin=1,
    # shift y label to right
    ylabel_style={yshift="-0.1cm"},
    "after end axis/.code" = {
        raw"\node[anchor=north west, font=\fontsize{12}{14}\selectfont] at (rel axis cs:.025,.975) {(a)};"
    },
    legend_cell_align="left",
    # legend_pos="north west",
    legend_style={
        at="{(0.15,0.95)}",
        anchor="north west",
        fill="none",
        draw="none",
    }
})
# plot()
counter=0
for Nk in Ns_k
    global counter
    if counter < 20
        # filter zeros
        times = time[Nk .> 0]
        Nk = Nk[Nk .> 0]
        # plot!(times, Nk, color="blue", alpha=0.1)
        
        if counter == 1
            push!(axis, @pgf Plot({mark="square",color="blue!20!white"}, 
                Table(times, Nk))
            )
        else
            push!(axis, @pgf Plot({mark="square",color="blue!20!white",forget_plot=true}, 
                Table(times, Nk))
            )
        end
        
        # save to csv as df 
        df = DataFrame(time=times, N=Nk)
        CSV.write("DATA/multiround_simulation_product_analysis_Nk_$(counter).csv", df)
    end
    counter += 1
end
axis


counter=0
for Nq in Ns_q
    global counter
    if counter < 20
        # filter zeros
        times = time[Nq .> 0]
        Nq = Nq[Nq .> 0]
        if counter == 1
            push!(axis, @pgf Plot({mark="o",color="red!20!white"}, 
                Table(times, Nq))
            )
        else
            push!(axis, @pgf Plot({mark="o",color="red!20!white",forget_plot=true}, 
                Table(times, Nq))
            )
        end
        df = DataFrame(time=times, N=Nq)
        CSV.write("DATA/multiround_simulation_product_analysis_Nq_$(counter).csv", df)
    end
    counter += 1
end
axis
# xlabel!("time")
# ylabel!("product number")




# implements the optimal threshold
function P‚Çú‚ÇïÍúõ(T, pars_k, pars_q)
    K = pars_k.k‚ÇÅ/(pars_k.k‚ÇÅ + pars_k.k‚Çã‚ÇÅ)
    Q = pars_q.k‚ÇÅ/(pars_q.k‚ÇÅ + pars_q.k‚Çã‚ÇÅ)
    œÑ = pars_k.œÑ
    return pars_k.k‚Çö * T * ‚àö(K * Q * exp(-pars_k.k‚Çã‚ÇÅ *  œÑ - pars_q.k‚Çã‚ÇÅ * œÑ))
end
# plot the threshold
# plot!(time, [P‚Çú‚ÇïÍúõ(t, k_pars, q_pars) for t in time], color="black", linestyle=:dash, label="threshold")
# save to csv as df
df = DataFrame(time=time, threshold=[P‚Çú‚ÇïÍúõ(t, k_pars, q_pars) for t in time])
# filter df such that threshold > 1
df = df[df.threshold .> 1, :]
push!(axis, @pgf Plot({mark="none", color="black", dashed},
    Table(df.time, df.threshold))
)
# also plot a constant line where the threshold is equal to the end of df.threshold
push!(axis, @pgf Plot({mark="none", color="purple", dashed,thick}, Coordinates([(1,200), (1e6,200)]))
)

axis
CSV.write("DATA/multiround_simulation_product_analysis_threshold.csv", df)

push!(axis, LegendEntry("correct substrate"), 
)
push!(axis, LegendEntry("incorrect substrate"), 
)
push!(axis, LegendEntry("dynamic threshold"), 
)
push!(axis, LegendEntry("static threshold"), 
)

push!(tikzpicture, axis)
pgfsave("FIG/dynamical_threshold.pgf", tikzpicture)
pgfsave("FIG/dynamical_threshold.pdf", tikzpicture)
@info  "FIG/dynamical_threshold.pdf saved"



#### Plot of X‚Çê
function stopping_time_to_trajectory(œÑ‚Çê, time)
    return [t < œÑ‚Çê ? 0 : 1 for t in time]
end

function stopping_time_to_trajectories(œÑ‚Çês, time)
    return [stopping_time_to_trajectory(œÑ‚Çê, time) for œÑ‚Çê in œÑ‚Çês]
end

tikzpicture = @pgf TikzPicture({baseline})
axis = @pgf Axis({
    width="3in",
    height="3in",
    xlabel="time since initial contact \$t\$",
    ylabel="activation status \$X_{\\rm a}(t)\$",
    xmode="log",
    # ymode="log",
    xmin=1,
    # ymin=1,
    ymin=-0.2,
    ymax=1.6,
    # yticks only at 0, 1
    ytick="{0,1}",
    # shift y label to right
    ylabel_style={yshift="-0.1cm"},
    "after end axis/.code" = {
        raw"\node[anchor=north west, font=\fontsize{12}{14}\selectfont] at (rel axis cs:.025,.975) {(b)};"
    },
    legend_cell_align="left",
    legend_pos="north west",
    legend_style={
        at="{(0.15,0.95)}",
        anchor="north west",
        fill="none",
        draw="none",
    }
})

# k substrate
counter=0
for œÑ‚Çê in œÑ‚Çês_k
    global counter
    if counter < 20
        # filter zeros
        # times = time[œÑ‚Çê .> 0]
        # œÑ‚Çê = œÑ‚Çê[œÑ‚Çê .> 0]
        if counter == 1
            push!(axis, @pgf Plot({mark="square",color="blue!40!white"}, 
                Table(time, stopping_time_to_trajectory(œÑ‚Çê, time))
            )
            )
        else
            push!(axis, @pgf Plot({mark="square",color="blue!40!white",forget_plot=true}, 
                Table(time, stopping_time_to_trajectory(œÑ‚Çê, time))
            )
            )
        end
        # df = DataFrame(time=times, X=stopping_time_to_trajectory(œÑ‚Çê, time))
        # CSV.write("DATA/multiround_simulation_product_analysis_œÑ‚Çê_k_$(counter).csv", df)
    end
    counter += 1
end
# q substrate
counter=0
for œÑ‚Çê in œÑ‚Çês_q
    global counter
    if counter < 20
        # filter zeros
        # times = time[œÑ‚Çê .> 0]
        # œÑ‚Çê = œÑ‚Çê[œÑ‚Çê .> 0]
        if counter == 1
            push!(axis, @pgf Plot({mark="o",color="red!40!white"}, 
                Table(time, stopping_time_to_trajectory(œÑ‚Çê, time))
            )
            )
        else
            push!(axis, @pgf Plot({mark="o",color="red!40!white",forget_plot=true}, 
                Table(time, stopping_time_to_trajectory(œÑ‚Çê, time))
            )
            )
        end
        # df = DataFrame(time=times, X=stopping_time_to_trajectory(œÑ‚Çê, time))
        # CSV.write("DATA/multiround_simulation_product_analysis_œÑ‚Çê_q_$(counter).csv", df)
    end
    counter += 1
end

# draw a vertical line at t = 400 in axis
push!(axis, @pgf Plot({mark="none", color="black", dashed, thick}, Coordinates([(300,0), (300,1)]))
)

# legend
push!(axis, LegendEntry("correct substrate"), 
)
push!(axis, LegendEntry("incorrect substrate"), 
)

push!(axis, LegendEntry("cell contact time \$ T\$"))

axis
push!(tikzpicture, axis)
pgfsave("FIG/FPT_schematic.pgf", tikzpicture)
pgfsave("FIG/FPT_schematic.pdf", tikzpicture)
@info  "FIG/FPT_schematic.pdf saved"

# histogram of P at T 
NT_k = [Ns_k[i][24] for i in eachindex(Ns_k)]
NT_q = [Ns_q[i][24] for i in eachindex(Ns_q)]

# histogram of P at T using PGFPlotsX
tikzpicture = @pgf TikzPicture({baseline})
axis = @pgf Axis({
    width="3in",
    height="3in",
    xlabel="number of products \${\\rm P}_T\$",
    ylabel="frequency",
    xmin=0,
    ymin=0,
    ybar,
    # xmode="log",
    # no y ticks 
    ytick="{}",
    yticklabels="{}",
    # shift y label to right
    ylabel_style={yshift="-0.1cm"},
    # y ticks using scientific notation
    # yticklabel_style = "{/pgf/number format/sci}",  # Use scientific notation
    "after end axis/.code" = {
        raw"\node[anchor=north west, font=\fontsize{12}{14}\selectfont] at (rel axis cs:.025,.975) {(c)};"
    },
    legend_cell_align="left",
    legend_pos="north west",
    legend_style={
        at="{(0.15,0.95)}",
        anchor="north west",
        fill="none",
        draw="none",
    }
})
# k substrate
# determine the bin counts
# load packages
using StatsBase
hist = fit(Histogram, NT_k, nbins=30)
# convert to bin position and bin count
bin_positions = hist.edges[1][1:end-1]
bin_counts = hist.weights
# normalize the bin counts 
bin_counts = bin_counts ./ sum(bin_counts)
# weight the bin counts by bin width
bin_counts = bin_counts ./ diff(hist.edges[1])
# plot the histogram in PGFPlotsX and adjust width of the bars
push!(axis, @pgf Plot({ybar, bar_width="0.2cm", color="blue!80!white", fill="blue!80!white"}, 
    Table(bin_positions, bin_counts))
)

# q substrate
hist = fit(Histogram, NT_q, nbins=30)
bin_positions = hist.edges[1][1:end-1]
bin_counts = hist.weights
bin_counts = bin_counts ./ sum(bin_counts)
bin_counts = bin_counts ./ diff(hist.edges[1])
push!(axis, @pgf Plot({ybar, bar_width="0.05cm", color="red!80!white", fill="red!80!white"}, 
    Table(bin_positions, bin_counts))
)
push!(axis, LegendEntry("correct substrate"), 
)
push!(axis, LegendEntry("incorrect substrate"), 
)

push!(tikzpicture, axis)
pgfsave("FIG/histogram_of_P.pgf", tikzpicture)
pgfsave("FIG/histogram_of_P.pdf", tikzpicture)
@info  "FIG/histogram_of_P.pdf saved"


##################################################################
function X‚Çú(ùêì‚Çö, pars_k, pars_q)
    # reference time based on P‚Çú‚ÇïÍúõ
    # find the time T such that P‚Çú‚ÇïÍúõ(T, pars_k, pars_q) = 1, 2, 3,..., 100
    K = pars_k.k‚ÇÅ/(pars_k.k‚ÇÅ + pars_k.k‚Çã‚ÇÅ)
    Q = pars_q.k‚ÇÅ/(pars_q.k‚ÇÅ + pars_q.k‚Çã‚ÇÅ)
    œÑ = pars_k.œÑ
    ùêì‚Çú‚Çï = [
        P‚Çú‚Çï / (pars_k.k‚Çö * ‚àö(K * Q * exp(-pars_k.k‚Çã‚ÇÅ *  œÑ - pars_q.k‚Çã‚ÇÅ * œÑ))) 
        for P‚Çú‚Çï in 1:100
    ]
    response = 0
    for (T‚Çö, T‚Çú‚Çï) in zip(ùêì‚Çö[10:end], ùêì‚Çú‚Çï[10:end])
        if T‚Çö < T‚Çú‚Çï # the number of products exceeds the threshold at T‚Çú‚Çï
            response = 1
            break
        end
    end
    return response 
end
function Tths(pars_k, pars_q)
    # reference time based on P‚Çú‚ÇïÍúõ
    # find the time T such that P‚Çú‚ÇïÍúõ(T, pars_k, pars_q) = 1, 2, 3,..., 100
    K = pars_k.k‚ÇÅ/(pars_k.k‚ÇÅ + pars_k.k‚Çã‚ÇÅ)
    Q = pars_q.k‚ÇÅ/(pars_q.k‚ÇÅ + pars_q.k‚Çã‚ÇÅ)
    œÑ = pars_k.œÑ
    ùêì‚Çú‚Çï = [
        P‚Çú‚Çï / (pars_k.k‚Çö * ‚àö(K * Q * exp(-pars_k.k‚Çã‚ÇÅ *  œÑ - pars_q.k‚Çã‚ÇÅ * œÑ))) 
        for P‚Çú‚Çï in 1:100
    ]
    return ùêì‚Çú‚Çï
end


‚àë = sum  # Alias for sum function

function P_œÑ‚Çö·µÄ‚Çú‚Çï(ùêì‚Çös;  Œæ = 0, pars_k = k_pars, pars_q=q_pars) # the probability of œÑ‚Çö·µÄ < T
    if Œæ == 0
        # incorrect substrate
        ùêì‚Çös = ùêì‚Çös[2]
    else
        # correct substrate
        ùêì‚Çös = ùêì‚Çös[1]
    end
    ùêó‚Çú = [X‚Çú(ùêì‚Çö, pars_k, pars_q) for ùêì‚Çö in ùêì‚Çös]
    return ‚àë(ùêó‚Çú)/length(ùêó‚Çú)
end

function X‚Çú_randT(ùêì‚Çö, pars_k, pars_q,t)
        # reference time based on P‚Çú‚ÇïÍúõ
    # find the time T such that P‚Çú‚ÇïÍúõ(T, pars_k, pars_q) = 1, 2, 3,..., 100
    K = pars_k.k‚ÇÅ/(pars_k.k‚ÇÅ + pars_k.k‚Çã‚ÇÅ)
    Q = pars_q.k‚ÇÅ/(pars_q.k‚ÇÅ + pars_q.k‚Çã‚ÇÅ)
    œÑ = pars_k.œÑ
    ùêì‚Çú‚Çï = [
        P‚Çú‚Çï / (pars_k.k‚Çö * ‚àö(K * Q * exp(-pars_k.k‚Çã‚ÇÅ *  œÑ - pars_q.k‚Çã‚ÇÅ * œÑ))) 
        for P‚Çú‚Çï in 1:100
    ]
    response = 0
    for (T‚Çö, T‚Çú‚Çï) in zip(ùêì‚Çö[10:end], ùêì‚Çú‚Çï[10:end])
        if T‚Çö < T‚Çú‚Çï && T‚Çö < t # the number of products exceeds the threshold at T‚Çú‚Çï
            response = 1
            break
        end
    end
    return response
end


function P_œÑ‚Çö·µÄ‚Çú‚Çï_randT(ùêì‚Çös;  Œæ = 0, pars_k = k_pars, pars_q=q_pars, Ts_k=rand_Ts_k, Ts_q=rand_Ts_q) # the probability of œÑ‚Çö·µÄ < T
    if Œæ == 0
        # incorrect substrate
        ùêì‚Çös = ùêì‚Çös[2]
        Ts = Ts_q
    else
        # correct substrate
        ùêì‚Çös = ùêì‚Çös[1]
        Ts = Ts_k
    end
    ùêó‚Çú = [X‚Çú_randT(ùêì‚Çö, pars_k, pars_q, T) for (ùêì‚Çö, T) in zip(ùêì‚Çös, Ts)]
    return ‚àë(ùêó‚Çú)/length(ùêó‚Çú)
end


function P_œÑ‚Çö·µÄ(ùêì‚Çös; T=1e6, Œæ = 0, n‚Çú‚Çï = 1) # the probability of œÑ‚Çö·µÄ < T
    if Œæ == 0
        # incorrect substrate
        ùêì‚Çö = ùêì‚Çös[2]
    else
        # correct substrate
        ùêì‚Çö = ùêì‚Çös[1]
    end
    œÑ‚Çö = [T‚Çö[n‚Çú‚Çï] for T‚Çö in ùêì‚Çö]
    return length(findall(œÑ‚Çö .< T)) / length(œÑ‚Çö)
end

P_œÑ‚Çö·µÄ_q = [
    P_œÑ‚Çö·µÄ(ùêì‚Çös; T=t, Œæ = 0, n‚Çú‚Çï = 1)
    for t in times
]

P_œÑ‚Çö·µÄ_k = [
    P_œÑ‚Çö·µÄ(ùêì‚Çös; T=t, Œæ = 1, n‚Çú‚Çï = 1)
    for t in times
]

using Plots
begin
i=11
scatter(ùêì‚Çös_q[i], label="sample 1")
scatter!(Tths(k_pars, q_pars), label="threshold")
title!("$(X‚Çú(ùêì‚Çös_q[i], k_pars, q_pars))")
end
P_œÑ‚Çö·µÄ‚Çú‚Çï_q =    P_œÑ‚Çö·µÄ‚Çú‚Çï(ùêì‚Çös; Œæ = 0)
P_œÑ‚Çö·µÄ‚Çú‚Çï_k =    P_œÑ‚Çö·µÄ‚Çú‚Çï(ùêì‚Çös; Œæ = 1)

function ‚Ñô_X‚Çö‚ùòŒæ(X, Œæ; ùêì‚Çös=ùêì‚Çös , pars_k = k_pars, pars_q=q_pars)
    if X == 1
        return P_œÑ‚Çö·µÄ‚Çú‚Çï(ùêì‚Çös; Œæ = Œæ, pars_k = pars_k, pars_q = pars_q)
    else
        return 1 - P_œÑ‚Çö·µÄ‚Çú‚Çï(ùêì‚Çös; Œæ = Œæ, pars_k = pars_k, pars_q = pars_q)
    end
end
function ‚Ñô_X‚Çö‚ùòŒæ_randT(X, Œæ; Ts_k = rand_Ts_k, Ts_q=rand_Ts_q, ùêì‚Çös=ùêì‚Çös , pars_k = k_pars, pars_q=q_pars)
    if X == 1
        return P_œÑ‚Çö·µÄ‚Çú‚Çï_randT(ùêì‚Çös; Œæ = Œæ, pars_k = pars_k, pars_q = pars_q, Ts_k = Ts_k, Ts_q = Ts_q)
    else
        return 1 - P_œÑ‚Çö·µÄ‚Çú‚Çï_randT(ùêì‚Çös; Œæ = Œæ, pars_k = pars_k, pars_q = pars_q, Ts_k = Ts_k, Ts_q = Ts_q)
    end
end

T = k_pars.T

rand_Ts_k = [rand() * T for i in ùêì‚Çös_k]
rand_Ts_q = [rand() * T for i in ùêì‚Çös_q]

Ts_k = rand_Ts_k
Ts_q = rand_Ts_q
function ‚Ñô_X‚Çö·µÄ‚ùòŒæ_randT(X‚Çö·µÄ, Œæ; Ts_k = rand_Ts_k, Ts_q=rand_Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0, n‚Çú‚Çï = 1)
    if Œæ == 0
        # incorrect substrate
        ùêì‚Çö = ùêì‚Çös[2]
        Ts = Ts_q
    else
        # correct substrate
        ùêì‚Çö = ùêì‚Çös[1]
        Ts = Ts_k
    end
    result = [T‚Çö[n‚Çú‚Çï] < t for (T‚Çö,t) in zip(ùêì‚Çö, Ts)]
    if X‚Çö·µÄ == 1 
        return ‚àë(result)/length(result)
    else
        return 1 - ‚àë(result)/length(result)
    end
end


function ‚Ñô_X‚Çö·µÄ‚ùòŒæ(X‚Çö·µÄ, Œæ; t=T, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0, n‚Çú‚Çï = 1)
    if Œæ == 0
        # incorrect substrate
        ùêì‚Çö = ùêì‚Çös[2]
    else
        # correct substrate
        ùêì‚Çö = ùêì‚Çös[1]
    end
    œÑ‚Çö = [T‚Çö[n‚Çú‚Çï] for T‚Çö in ùêì‚Çö]
    if X‚Çö·µÄ == 1 
        return length(findall(œÑ‚Çö .< t)) / length(œÑ‚Çö)
    else
        return 1 - length(findall(œÑ‚Çö .< t)) / length(œÑ‚Çö)
    end
end

function ‚Ñô_Œæ(Œæ; P_Œæ‚ÇÄ = 0)
    if Œæ == 0
        return P_Œæ‚ÇÄ
    else
        return 1 - P_Œæ‚ÇÄ
    end
end
Œû = [0,1]
ùêó = [0,1]

function ‚Ñô_X‚Çö·µÄŒæ(X‚Çö·µÄ, Œæ; t=T, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0, n‚Çú‚Çï = 1) # joint probability 
    return ‚Ñô_X‚Çö·µÄ‚ùòŒæ(X‚Çö·µÄ, Œæ; t=t, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï = n‚Çú‚Çï) * ‚Ñô_Œæ(Œæ; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ)
end

function ‚Ñô_X‚Çö·µÄŒæ_randT(X‚Çö·µÄ, Œæ; Ts_k = rand_Ts_k, Ts_q=rand_Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0.5, n‚Çú‚Çï = 1) # joint probability 
    return ‚Ñô_X‚Çö·µÄ‚ùòŒæ_randT(X‚Çö·µÄ, Œæ; Ts_k = Ts_k, Ts_q = Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï = n‚Çú‚Çï) * ‚Ñô_Œæ(Œæ; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ)
end

function ‚Ñô_X‚Çö·µÄ(X‚Çö·µÄ; t=T, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0, n‚Çú‚Çï = 1)
    return ‚àë(‚Ñô_X‚Çö·µÄŒæ(X‚Çö·µÄ, Œæ; t=t, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï=n‚Çú‚Çï) for Œæ ‚àà Œû)
end

function ‚Ñô_X‚Çö·µÄ_randT(X‚Çö·µÄ; Ts_k = rand_Ts_k, Ts_q=rand_Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0, n‚Çú‚Çï = 1)
    return ‚àë(‚Ñô_X‚Çö·µÄŒæ_randT(X‚Çö·µÄ, Œæ; Ts_k = Ts_k, Ts_q = Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï=n‚Çú‚Çï) for Œæ ‚àà Œû)
end

function log‚ÇÇ(x)
    if x == 0 || isnan(x)
        return 0
    else
        return log2(x)
    end
end

# mutual information
function ùïÄ‚Çö·µÄ(t,ùêì‚Çös, P_Œæ‚ÇÄ, n‚Çú‚Çï)
    I = ‚àë(‚Ñô_X‚Çö·µÄŒæ(X,Œæ;t,ùêì‚Çös,P_Œæ‚ÇÄ,n‚Çú‚Çï)* log‚ÇÇ(
                    ‚Ñô_X‚Çö·µÄŒæ(X,Œæ;t,ùêì‚Çös,P_Œæ‚ÇÄ,n‚Çú‚Çï) / (‚Ñô_X‚Çö·µÄ(X;t,ùêì‚Çös,P_Œæ‚ÇÄ,n‚Çú‚Çï) * ‚Ñô_Œæ(Œæ;P_Œæ‚ÇÄ))
                ) 
        for X ‚àà ùêó, Œæ ‚àà Œû)
    return I 
end

function ùïÄ‚Çö·µÄ_randT(;t=T, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0.5, n‚Çú‚Çï = 1, Ts_k=rand_Ts_k, Ts_q=rand_Ts_q)
    I = ‚àë(‚Ñô_X‚Çö·µÄŒæ_randT(X‚Çö·µÄ, Œæ; Ts_k = Ts_k, Ts_q = Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï=n‚Çú‚Çï) * log‚ÇÇ(
        ‚Ñô_X‚Çö·µÄŒæ_randT(X‚Çö·µÄ, Œæ; Ts_k = Ts_k, Ts_q=Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï = 1)
                    / (‚Ñô_X‚Çö·µÄ_randT(X‚Çö·µÄ; Ts_k = Ts_k, Ts_q=Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ, n‚Çú‚Çï = 1)* ‚Ñô_Œæ(Œæ;P_Œæ‚ÇÄ))
                ) 
        for X‚Çö·µÄ ‚àà ùêó, Œæ ‚àà Œû)
    return I 
end

ùïÄ‚Çö·µÄ(1e6, ùêì‚Çös, 0.5, 10)
‚Ñô_X‚Çö·µÄŒæ_randT(1,1,; n‚Çú‚Çï=1, )
‚Ñô_X‚Çö·µÄŒæ_randT(1, 1; Ts_k = rand_Ts_k, Ts_q = rand_Ts_q, ùêì‚Çös=ùêì‚Çös, P_Œæ‚ÇÄ = 0.5, n‚Çú‚Çï=15)
function ùïÄ‚Çö(ùêì‚Çös, P_Œæ‚ÇÄ)
    I = ‚àë(‚Ñô_X‚Çö‚ùòŒæ(X,Œæ; ùêì‚Çös=ùêì‚Çös) * ‚Ñô_Œæ(Œæ; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ)  * log‚ÇÇ(
        ‚Ñô_X‚Çö‚ùòŒæ(X,Œæ; ùêì‚Çös=ùêì‚Çös) / ‚àë(
            [
                ‚Ñô_X‚Çö‚ùòŒæ(X,Œæ‚Ä≤; ùêì‚Çös=ùêì‚Çös) * ‚Ñô_Œæ(Œæ‚Ä≤; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) 
                for Œæ‚Ä≤ ‚àà Œû
            ]
        )
    ) for Œæ ‚àà Œû, X ‚àà ùêó)
    return I
end

function ùïÄ‚Çö_randT(ùêì‚Çös, P_Œæ‚ÇÄ, Ts_k, Ts_q)
    I = ‚àë(‚Ñô_X‚Çö‚ùòŒæ_randT(X,Œæ; Ts_k = Ts_k, Ts_q = Ts_q, ùêì‚Çös=ùêì‚Çös) * ‚Ñô_Œæ(Œæ; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ)  * log‚ÇÇ(
        ‚Ñô_X‚Çö‚ùòŒæ_randT(X,Œæ; Ts_k = Ts_k, Ts_q = Ts_q, ùêì‚Çös=ùêì‚Çös) / ‚àë(
            [
                ‚Ñô_X‚Çö‚ùòŒæ_randT(X,Œæ‚Ä≤; Ts_k = Ts_k, Ts_q = Ts_q, ùêì‚Çös=ùêì‚Çös) * ‚Ñô_Œæ(Œæ‚Ä≤; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) 
                for Œæ‚Ä≤ ‚àà Œû
            ]
        )
    ) for Œæ ‚àà Œû, X ‚àà ùêó)
    return I
end

push!(PGFPlotsX.CUSTOM_PREAMBLE, raw"\usetikzlibrary{patterns}")
mutual_information_of_dynamical_threshold_fixed_T = ùïÄ‚Çö(ùêì‚Çös, 0.5)
mutual_information_of_dynamical_threshold_random_T = ùïÄ‚Çö_randT(ùêì‚Çös, 0.5, rand_Ts_k, rand_Ts_q)
# now consider the possibility of randomly masking the total time T
Ts = [10.0^i for i in 0:0.2:6]
maximum_mutual_information_of_fixed_threshold_fixed_T = maximum([ùïÄ‚Çö·µÄ(T, ùêì‚Çös, 0.5, n‚Çú‚Çï) for n‚Çú‚Çï in 1:100, T in Ts])
maximum_mutual_information_of_fixed_threshold_random_T = maximum([ùïÄ‚Çö·µÄ_randT(ùêì‚Çös=ùêì‚Çös, Ts_k=rand_Ts_k, Ts_q = rand_Ts_q, n‚Çú‚Çï=n,P_Œæ‚ÇÄ=0.5) for n in 1:100])

# use a grouped bar plots to visualize the above 4 quantities in PGFPlotsX 
using PGFPlotsX
tikzpicture = @pgf TikzPicture({baseline})
axis = @pgf Axis({
    width="3in",
    height="3in",
    ybar,
    ylabel= "mutual information \$\\mathcal{I}\$",
    xtick="{0.93,1.27}",
    xticklabels={
        "static threshold",
        "dynamic threshold"
    },
    xlabel="scenario",
    # nodes_near_coords,
    # tilt the xtick labels
    xmin=0.75,
    xmax=1.45,
    ymin=0,
    ymax=1.5,
    # shift y label to right
    ylabel_style={yshift="-0.1cm"},
    # do not show numbers on top of bars
    bar_width="15pt",
    legend_cell_align="left",
    legend_pos="north east",
    legend_style={
        # at="{(0.5,1.0)}",
        # anchor="north",
        fill="none",
        draw="none",
        # legend_columns=2,
    },
    "after end axis/.code" = {
        raw"\node[anchor=north west, font=\fontsize{12}{14}\selectfont] at (rel axis cs:.025,.975) {(b)};"
    }
},
Plot({color="green", fill="green!60!black!20!white"},Coordinates(
    [
        1
    ],
    [
        maximum_mutual_information_of_fixed_threshold_fixed_T,
    ]
)),
Plot({color="green", fill="green!60!black!20!white",pattern={"north east lines"}},Coordinates(
    [
        1.0
    ],
    [
        maximum_mutual_information_of_fixed_threshold_random_T,
    ]
)),
Plot({color="orange", fill="orange!60!black!20!white"},Coordinates(
    [
        1.2
    ],
    [
        mutual_information_of_dynamical_threshold_fixed_T,
    ]
)),
Plot({color="orange", fill="orange!60!black!20!white",pattern={"north east lines"}},Coordinates(
    [
        1.2
    ],
    [
        mutual_information_of_dynamical_threshold_random_T,
    ]
)),
# legend for each bar
LegendEntry("fixed \$P_{\\rm th}\$, fixed \$T\$"),
LegendEntry("fixed \$P_{\\rm th}\$, random \$T\$"),
LegendEntry("dynamic \$P_{\\rm th}\$, fixed \$T\$"),
LegendEntry("dynamic \$P_{\\rm th}\$, random \$T\$"),

)
push!(tikzpicture, axis)
pgfsave("FIG/mutual_information_of_random_and_fixed_T.pgf", tikzpicture)
pgfsave("FIG/mutual_information_of_random_and_fixed_T.pdf", tikzpicture)
@info "FIG/mutual_information_of_random_and_fixed_T.pdf saved"


# channel capacity
using Optim
function CC‚Çö·µÄ(;t=T, ùêì‚Çös=ùêì‚Çös, n‚Çú‚Çï=1)
    # Initial guess for p‚ÇÄ
    initial_guess = [0.5]
    lower_bounds = [0.0]  # Lower bound for p‚ÇÄ
    upper_bounds = [1.0]  # Upper bound for p‚ÇÄ
    loss = p -> -ùïÄ‚Çö·µÄ(t,ùêì‚Çös,p[1], n‚Çú‚Çï)
    # Perform the optimization
    opt_result = optimize(loss, lower_bounds, upper_bounds ,initial_guess, Fminbox(LBFGS()); inplace = false)

    # Extract optimal input distribution and channel capacity
    optimal_p‚ÇÄ = opt_result.minimizer[1]
    channel_capacity = -opt_result.minimum  # Negate to get the maximum

    return (channel_capacity, optimal_p‚ÇÄ)
end
times_refined = [10.0^i for i in 0:0.05:6]
ùêÇ‚Çö·µÄs = [[CC‚Çö·µÄ(t=t, ùêì‚Çös=ùêì‚Çös, n‚Çú‚Çï=n)[1] for t in times_refined] for n in 1:100]

using PGFPlotsX


Œ¶s_k = [result[1] for result in results_k]
# collection of times
Ts_k = [result[2] for result in results_k]
# collection of first activation times
œÑ‚Çês_k = [result[3] for result in results_k]
Ps_k = [[œï[i][1] for œï in Œ¶s_k] for i in 1:length(times)]

# collection of states, times and first activation times for incorrect substrate
Œ¶s_q = [result[1] for result in results_q]
Ts_q = [result[2] for result in results_q]
œÑ‚Çês_q = [result[3] for result in results_q]
Ps_q = [[œï[i][1] for œï in Œ¶s_q] for i in 1:length(times)]
P‚Çú_k = Ps_k[end]
P‚Çú_q = Ps_q[end]
P‚Çú = [P‚Çú_k, P‚Çú_q]
Œ©‚Çö(P‚Çú) = P‚Çú[1] ‚à™ P‚Çú[2] |> unique
‚Ñô‚Çú_k(P‚Çú) = [length(findall(P‚Çú[1] .== œâ)) / length(P‚Çú[1]) for œâ in Œ©‚Çö(P‚Çú)]
‚Ñô‚Çú_q(P‚Çú) = [length(findall(P‚Çú[2] .== œâ)) / length(P‚Çú[2]) for œâ in Œ©‚Çö(P‚Çú)]
‚Ñô‚Çú(P‚Çú) = [‚Ñô‚Çú_k(P‚Çú), ‚Ñô‚Çú_q(P‚Çú)]

function ‚Ñô_n‚ùòŒæ(n;Œæ = 0, P‚Çú = P‚Çú, P_Œæ‚ÇÄ = 0)
    if Œæ == 0
        return length(findall(P‚Çú[2] .== n)) / length(P‚Çú[2])
    else
        return length(findall(P‚Çú[1] .== n)) / length(P‚Çú[1])
    end
end
function ‚Ñô_nŒæ(n,Œæ; P‚Çú = P‚Çú, P_Œæ‚ÇÄ = 0)
    return ‚Ñô_n‚ùòŒæ(n;Œæ = Œæ, P‚Çú = P‚Çú, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) * ‚Ñô_Œæ(Œæ; P_Œæ‚ÇÄ = P_Œæ‚ÇÄ)
end

function ‚Ñô_n(n; P‚Çú = P‚Çú, P_Œæ‚ÇÄ = 0)
    return ‚àë(‚Ñô_nŒæ(n,Œæ; P‚Çú = P‚Çú, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) for Œæ ‚àà Œû)
end

function ùïÄ‚Çö(P‚Çú, P_Œæ‚ÇÄ)
    I = ‚àë(‚Ñô_nŒæ(n,Œæ; P‚Çú = P‚Çú, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) * log‚ÇÇ(
                    ‚Ñô_nŒæ(n,Œæ; P‚Çú = P‚Çú, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) 
                    / (‚Ñô_n(n; P‚Çú = P‚Çú, P_Œæ‚ÇÄ = P_Œæ‚ÇÄ) * ‚Ñô_Œæ(Œæ;P_Œæ‚ÇÄ))
                ) 
        for n ‚àà Œ©‚Çö(P‚Çú), Œæ ‚àà Œû)
    return I 
end

function CC‚Çö(;P‚Çú = P‚Çú)
    # Initial guess for p‚ÇÄ
    initial_guess = [0.5]
    lower_bounds = [0.0]  # Lower bound for p‚ÇÄ
    upper_bounds = [1.0]  # Upper bound for p‚ÇÄ
    loss = p -> -ùïÄ‚Çö(P‚Çú,p[1])
    # Perform the optimization
    opt_result = optimize(loss, lower_bounds, upper_bounds ,initial_guess, Fminbox(LBFGS()); inplace = false)

    # Extract optimal input distribution and channel capacity
    optimal_p‚ÇÄ = opt_result.minimizer[1]
    channel_capacity = -opt_result.minimum  # Negate to get the maximum

    return (channel_capacity, optimal_p‚ÇÄ)
end


ùêà‚Çö = [ùïÄ‚Çö([Ps_k[i], Ps_q[i]], 0.5) for i ‚àà eachindex(times)]
ùêÇ‚Çö = [CC‚Çö(P‚Çú = [Ps_k[i], Ps_q[i]])[1] for i ‚àà eachindex(times)]

#### Plot of Œ∑_FLD vs time and CC‚Çö vs time
plot_comparison_1 = @pgf Axis(
    {
        width="5in",
        height="3in",
        xlabel="cell contact time \$T\$",
        ylabel="channel capacity \$C\$",
        legend_pos="north west",
        xmode="log",
        legend_cell_align="left",
        legend_style={
            anchor="north west",
            at="(0.02,0.98)",
            draw="none",
            fill="none",
        },
        ymin = 0,
        ymax = 1,
        xmin = 1,
        xmax = 1e6,
    },
    PlotInc({mark="square",color="blue"}, Table(times, ùêÇ‚Çö)),
    LegendEntry("\$C\\big(\\xi; {\\rm P}(T)\\big)\$"),
)
plot_comparison_2 = @pgf Axis(
    {
        width="5in",
        height="3in",
        xlabel="cell contact time \$T\$",
        ylabel="FLD \$\\eta_{\\rm FLD}(T)\$",
        legend_style={
            anchor="north west",
            at="(0.02,0.90)",
            draw="none",
            fill="none",
        },
        xmode="log",
        # ymode="log",
        ymin = 0,
        ymax = 1,
        xmin = 1,
        xmax = 1e6,
        legend_cell_align="left",
        axis_y_line = "right"
    },
    PlotInc({mark="o",color="black"}, Table(times, Œ∑_FLD)),
    LegendEntry("\$\\eta_{\\rm FLD}(T)\$"),
)

overlay_plot = TikzPicture(plot_comparison_1, plot_comparison_2)
pgfsave("FIG/multiround_simulation_product_FLD_mutual_information_$(label)_overlay.pgf", overlay_plot)
pgfsave("FIG/multiround_simulation_product_FLD_mutual_information_$(label)_overlay.pdf", overlay_plot)
pgfsave("FIG/multiround_simulation_product_FLD_mutual_information_$(label)_overlay.svg", overlay_plot)
@info "Figure saved to FIG/multiround_simulation_product_FLD_mutual_information_$(label)_overlay.pdf"
# combine two plots into one frame
plot_comparison = @pgf Axis(
    {
        width="5in",
        height="3in",
        xlabel="cell contact time \$T\$",
        legend_pos="north west",
        xmode="log",
        legend_style={
            anchor="north west",
            at="(0.02,0.9)",
            draw="none",
            fill="none",
        },
        legend_cell_align="left",
    },
    plot_comparison_1,
    plot_comparison_2,
)




plot1 = @pgf Axis(
    {
        width="5in",
        height="3in",
        xlabel="cell contact time \$T\$",
        ylabel="channel capacity \$C\$",
        legend_pos="north west",
        xmode="log",
        legend_cell_align="left",
        legend_style="{
            draw=none,
            fill=none,
        }"
    },
    PlotInc({mark="o",color="black!10!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[1])),
    PlotInc({mark="o",color="black!20!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[2])),
    PlotInc({mark="o",color="black!30!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[5])),
    PlotInc({mark="o",color="black!50!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[10])),
    PlotInc({mark="o",color="black!70!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[50])),
    PlotInc({mark="o",color="black!100!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[100])),    
    PlotInc({mark="square",color="blue"}, Table(times, ùêÇ‚Çö)),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 1)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 2)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 5)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 10)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 50)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 100)\$"),
    LegendEntry("\$C\\big(\\xi; {\\rm P}(T)\\big)\$"),
)

pgfsave("FIG/multiround_simulation_product_fpt_analysis_$(label).pgf", plot1)
pgfsave("FIG/multiround_simulation_product_fpt_analysis_$(label).pdf", plot1)
pgfsave("FIG/multiround_simulation_product_fpt_analysis_$(label).svg", plot1)
@info "Figure saved to FIG/multiround_simulation_product_fpt_analysis_$(label).pdf"

plot1 = @pgf Axis(
    {
        width="4in",
        height="4in",
        xlabel="cell contact time \$T\$",
        ylabel="channel capacity \$C\$",
        legend_pos="north west",
        xmode="log",
        legend_cell_align="left",
        legend_style="{
            draw=none,
            fill=none,
        }"
    },
    PlotInc({mark="o",color="black!10!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[1])),
    PlotInc({mark="o",color="black!20!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[2])),
    PlotInc({mark="o",color="black!30!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[5])),
    PlotInc({mark="o",color="black!50!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[10])),
    PlotInc({mark="o",color="black!70!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[50])),
    PlotInc({mark="o",color="black!100!red",no_marks}, Table(times_refined, ùêÇ‚Çö·µÄs[100])),    
    PlotInc({mark="square",color="blue"}, Table(times, ùêÇ‚Çö)),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 1)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 2)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 5)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 10)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 50)\$"),
    LegendEntry("\$C(\\xi; X_{\\rm th} \\mid {\\rm P}_{\\rm th} = 100)\$"),
    LegendEntry("\$C\\big(\\xi; {\\rm P}(T)\\big)\$"),
)
pgfsave("FIG/fig_poster_4.pdf", plot1)